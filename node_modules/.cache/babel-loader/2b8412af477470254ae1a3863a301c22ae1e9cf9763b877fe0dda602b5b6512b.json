{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function RecommendCard(_ref){let{userId,objectId,objectName,objectUrl,objectArtistName,objectYear}=_ref;const[photo,setPhoto]=useState('');const[title,setTitle]=useState('');const[description,setDescription]=useState('');const[favoriteArtworks,setFavoriteArtworks]=useState([]);const[isFavorite,setIsFavorite]=useState(false);const fetchFavArtworks=async userId=>{try{const response=await fetch(`http://localhost:8000/api/users/${userId}/fav-artworks`);if(!response.ok){throw new Error('Failed to load favorite artworks');}const favArtworks=await response.json();console.log('Favorite Artworks:',favArtworks);// Update your state or display the data\nsetFavoriteArtworks(favArtworks);}catch(error){console.error('Error fetching favorite artworks:',error);}};// fetch fav artworks\n// Call this function in a useEffect or on a button click\nuseEffect(()=>{if(userId){fetchFavArtworks(userId);}},[userId]);const checkIsFavorite=useCallback(()=>{console.log(\"favoriteArtworks:\",favoriteArtworks);console.log(\"아이디\",objectId);const isFound=favoriteArtworks.some(item=>item.object_id===String(objectId));if(isFound){console.log(`ID ${objectId}가 배열에 존재합니다.`);setIsFavorite(true);}else{console.log(`ID ${objectId}가 배열에 없습니다.`);setIsFavorite(false);}},[favoriteArtworks,objectId]);useEffect(()=>{if(objectId&&favoriteArtworks.length>0){checkIsFavorite();}},[objectId,favoriteArtworks,checkIsFavorite]);useEffect(()=>{console.log(`isFavorite updated: ${isFavorite}`);},[isFavorite]);const toggleFavoriteArtwork=async()=>{if(isFavorite){removeArtwork();}else{saveArtwork();}};const removeArtwork=async()=>{try{const response=await fetch(`http://localhost:8000/api/users/${userId}/fav-artworks/${objectId}`,{method:'DELETE'});if(!response.ok){throw new Error('Failed to remove artwork');}console.log(\"Deleted Successfully\");setIsFavorite(false);fetchFavArtworks(userId);}catch(error){console.error('Error removing artwork:',error);}};const saveArtwork=async()=>{try{const response=await fetch(`http://localhost:8000/api/users/${userId}/fav-artworks`,{method:'PATCH',headers:{'Content-Type':'application/json'},body:JSON.stringify({object_id:objectId,object_name:objectName,object_url:objectUrl,object_artistName:objectArtistName||'Unknown',object_year:objectYear||'Unknown'})});if(!response.ok){throw new Error('Failed to save artwork');}const updatedUser=await response.json();console.log('Artwork saved successfully:',updatedUser);setIsFavorite(true);fetchFavArtworks(userId);}catch(error){console.error('Error saving artwork:',error);}};useEffect(()=>{setPhoto(objectUrl);setTitle(objectName);if(objectArtistName!==\"\"){setDescription(objectArtistName,objectYear);}else{// Display \"Unknown\" if the data does not exist\nsetDescription(\"Unknown\",objectYear);}},[objectId,objectName,objectUrl,objectArtistName,objectYear]);// Slice text if it is too long\nconst truncateText=(text,n)=>{return text.length>n?text.slice(0,n)+'…':text;};return/*#__PURE__*/_jsxs(\"div\",{className:\"recommendBox\",children:[/*#__PURE__*/_jsx(\"img\",{src:isFavorite?'/img/heart-filled.svg':'/img/heart.svg',alt:\"button\",className:\"fav_button_card\",onClick:()=>{toggleFavoriteArtwork();// Call the saveArtwork function\n}}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"img\",{src:photo,alt:title,className:\"recommend_imgBox\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"recommend_infoBox\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"recommend_title\",children:truncateText(title,50)}),/*#__PURE__*/_jsx(\"div\",{className:\"recommend_description\",children:description})]})]});}export default RecommendCard;","map":{"version":3,"names":["useState","useEffect","useCallback","jsx","_jsx","jsxs","_jsxs","RecommendCard","_ref","userId","objectId","objectName","objectUrl","objectArtistName","objectYear","photo","setPhoto","title","setTitle","description","setDescription","favoriteArtworks","setFavoriteArtworks","isFavorite","setIsFavorite","fetchFavArtworks","response","fetch","ok","Error","favArtworks","json","console","log","error","checkIsFavorite","isFound","some","item","object_id","String","length","toggleFavoriteArtwork","removeArtwork","saveArtwork","method","headers","body","JSON","stringify","object_name","object_url","object_artistName","object_year","updatedUser","truncateText","text","n","slice","className","children","src","alt","onClick"],"sources":["/Users/yoonsoo/Documents/dev/artbook/src/recommend/RecommendCard.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nfunction RecommendCard({ userId, objectId, objectName, objectUrl, objectArtistName, objectYear }) {\n    const [photo, setPhoto] = useState('');\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n    const [favoriteArtworks, setFavoriteArtworks] = useState([]);\n    const [isFavorite, setIsFavorite] = useState(false);\n\n    const fetchFavArtworks = async (userId) => {\n        try {\n            const response = await fetch(`http://localhost:8000/api/users/${userId}/fav-artworks`);\n    \n            if (!response.ok) {\n                throw new Error('Failed to load favorite artworks');\n            }\n    \n            const favArtworks = await response.json();\n            console.log('Favorite Artworks:', favArtworks);\n\n            // Update your state or display the data\n            setFavoriteArtworks(favArtworks);\n        } catch (error) {\n            console.error('Error fetching favorite artworks:', error);\n        }\n    };\n\n    // fetch fav artworks\n    // Call this function in a useEffect or on a button click\n    useEffect(() => {\n        if (userId) {\n            fetchFavArtworks(userId);\n        }\n    }, [userId]);\n\n    const checkIsFavorite = useCallback(() => {\n        console.log(\"favoriteArtworks:\", favoriteArtworks);\n        console.log(\"아이디\", objectId);\n\n        const isFound = favoriteArtworks.some((item) => item.object_id === String(objectId));\n    \n        if (isFound) {\n            console.log(`ID ${objectId}가 배열에 존재합니다.`);\n            setIsFavorite(true);\n        } else {\n            console.log(`ID ${objectId}가 배열에 없습니다.`);\n            setIsFavorite(false);\n        }\n    }, [favoriteArtworks, objectId]);\n\n    useEffect(() => {\n        if (objectId && favoriteArtworks.length > 0) {\n            checkIsFavorite();\n        }\n    }, [objectId, favoriteArtworks, checkIsFavorite]);\n    \n\n    useEffect(() => {\n        console.log(`isFavorite updated: ${isFavorite}`);\n    }, [isFavorite]);\n\n    const toggleFavoriteArtwork = async () => {\n        if(isFavorite) {\n            removeArtwork();\n        } else {\n            saveArtwork();\n        }\n    }\n    const removeArtwork = async () => {\n        try {\n            const response = await fetch(`http://localhost:8000/api/users/${userId}/fav-artworks/${objectId}`, {\n                method: 'DELETE',\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to remove artwork');\n            } \n            \n            console.log(\"Deleted Successfully\");\n            setIsFavorite(false);\n            fetchFavArtworks(userId);\n        } catch (error) {\n            console.error('Error removing artwork:', error);\n        }\n    };\n\n    const saveArtwork = async () => {\n        try {\n            const response = await fetch(`http://localhost:8000/api/users/${userId}/fav-artworks`, {\n                method: 'PATCH',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    object_id: objectId,\n                    object_name: objectName,\n                    object_url: objectUrl,\n                    object_artistName: objectArtistName || 'Unknown',\n                    object_year: objectYear || 'Unknown',\n                }),\n            });\n    \n            if (!response.ok) {\n                throw new Error('Failed to save artwork');\n            }\n    \n            const updatedUser = await response.json();\n            console.log('Artwork saved successfully:', updatedUser);\n            setIsFavorite(true);\n            fetchFavArtworks(userId);\n        } catch (error) {\n            console.error('Error saving artwork:', error);\n        }\n    };\n\n    useEffect(() => {\n        setPhoto(objectUrl);\n        setTitle(objectName);\n        if (objectArtistName !== \"\") {\n            setDescription(objectArtistName, objectYear);\n        } else {\n            // Display \"Unknown\" if the data does not exist\n            setDescription(\"Unknown\", objectYear);\n        }\n    }, [objectId, objectName, objectUrl, objectArtistName, objectYear]);\n\n    // Slice text if it is too long\n    const truncateText = (text, n) => {\n        return text.length > n ? text.slice(0, n) + '…' : text;\n    };\n\n    return (\n        <div className=\"recommendBox\">\n            <img \n                src={isFavorite ? '/img/heart-filled.svg' : '/img/heart.svg'}\n                alt=\"button\" \n                className=\"fav_button_card\" \n                onClick={() => {\n                    toggleFavoriteArtwork(); // Call the saveArtwork function\n                }} \n            />\n            <div><img src={photo} alt={title} className=\"recommend_imgBox\"></img></div>\n            <div className=\"recommend_infoBox\">\n                <div className=\"recommend_title\">{truncateText(title, 50)}</div>\n                <div className=\"recommend_description\">{description}</div>\n            </div>\n        </div>\n    );\n}\n\nexport default RecommendCard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}