{"ast":null,"code":"import ResultArray from'./ResultArray';import{useSearchParams}from'react-router-dom';import{useEffect,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";function Result(_ref){let{userId}=_ref;// https://reactrouter.com/en/main/hooks/use-search-params\n// https://developer.mozilla.org/en-US/docs/Web/API/Location/search\n// Utilize useSearchParams from React Router DOM as the search parameter for the API\nconst[searchParams]=useSearchParams();const idParam=searchParams.get('id');const categoryParam=searchParams.get('category');const[artworkData,setArtworkData]=useState([]);const[navId,setnavId]=useState(\"\");useEffect(()=>{setnavId(idParam);},[idParam]);useEffect(()=>{if(idParam&&categoryParam){fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${idParam}`).then(response=>response.json()).then(data=>{console.log(data);fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&isOnView=true&q=${categoryParam}`).then(response=>response.json()).then(searchData=>{// Check if objectIDs exist, then filter out objectID 78870\nif(searchData.objectIDs){const filteredIDs=searchData.objectIDs.filter(id=>id!==78870);// Update state with the filtered objectIDs\nsetArtworkData(filteredIDs);}}).catch(error=>console.log(error));}).catch(error=>console.log(error));}},[idParam,categoryParam]);return/*#__PURE__*/_jsx(ResultArray,{value:artworkData,navName:\"medium\",navId:navId,userId:userId});}export default Result;","map":{"version":3,"names":["ResultArray","useSearchParams","useEffect","useState","jsx","_jsx","Result","_ref","userId","searchParams","idParam","get","categoryParam","artworkData","setArtworkData","navId","setnavId","fetch","then","response","json","data","console","log","searchData","objectIDs","filteredIDs","filter","id","catch","error","value","navName"],"sources":["/Users/yoonsoo/Documents/dev/artbook/src/categories/Medium.js"],"sourcesContent":["import ResultArray from './ResultArray';\nimport { useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\n\nfunction Result({ userId }) {\n    // https://reactrouter.com/en/main/hooks/use-search-params\n    // https://developer.mozilla.org/en-US/docs/Web/API/Location/search\n    // Utilize useSearchParams from React Router DOM as the search parameter for the API\n    const [searchParams] = useSearchParams();\n    const idParam = searchParams.get('id');\n    const categoryParam = searchParams.get('category');\n    const [artworkData, setArtworkData] = useState([]);\n    const [navId, setnavId] = useState(\"\");\n\n    useEffect(() => {\n        setnavId(idParam);\n    }, [idParam]);\n\n    useEffect(() => {\n        if (idParam && categoryParam) {\n            fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${idParam}`)\n                .then(response => response.json())\n                .then(data => {\n                    console.log(data);\n    \n                    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&isOnView=true&q=${categoryParam}`)\n                        .then(response => response.json())\n                        .then(searchData => {\n                            // Check if objectIDs exist, then filter out objectID 78870\n                            if (searchData.objectIDs) {\n                                const filteredIDs = searchData.objectIDs.filter(id => id !== 78870);\n                                // Update state with the filtered objectIDs\n                                setArtworkData(filteredIDs);\n                            }\n                        })\n                        .catch(error => console.log(error));\n                })\n                .catch(error => console.log(error));\n        }\n    }, [idParam, categoryParam]);\n        \n    return (\n        <ResultArray value={artworkData} navName=\"medium\" navId={navId} userId={userId} />\n    );\n}\n\nexport default Result;\n"],"mappings":"AAAA,MAAO,CAAAA,WAAW,KAAM,eAAe,CACvC,OAASC,eAAe,KAAQ,kBAAkB,CAClD,OAASC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE5C,QAAS,CAAAC,MAAMA,CAAAC,IAAA,CAAa,IAAZ,CAAEC,MAAO,CAAC,CAAAD,IAAA,CACtB;AACA;AACA;AACA,KAAM,CAACE,YAAY,CAAC,CAAGR,eAAe,CAAC,CAAC,CACxC,KAAM,CAAAS,OAAO,CAAGD,YAAY,CAACE,GAAG,CAAC,IAAI,CAAC,CACtC,KAAM,CAAAC,aAAa,CAAGH,YAAY,CAACE,GAAG,CAAC,UAAU,CAAC,CAClD,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACY,KAAK,CAAEC,QAAQ,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAEtCD,SAAS,CAAC,IAAM,CACZc,QAAQ,CAACN,OAAO,CAAC,CACrB,CAAC,CAAE,CAACA,OAAO,CAAC,CAAC,CAEbR,SAAS,CAAC,IAAM,CACZ,GAAIQ,OAAO,EAAIE,aAAa,CAAE,CAC1BK,KAAK,CAAC,oEAAoEP,OAAO,EAAE,CAAC,CAC/EQ,IAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,EAAI,CACVC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CAEjBJ,KAAK,CAAC,kGAAkGL,aAAa,EAAE,CAAC,CACnHM,IAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACM,UAAU,EAAI,CAChB;AACA,GAAIA,UAAU,CAACC,SAAS,CAAE,CACtB,KAAM,CAAAC,WAAW,CAAGF,UAAU,CAACC,SAAS,CAACE,MAAM,CAACC,EAAE,EAAIA,EAAE,GAAK,KAAK,CAAC,CACnE;AACAd,cAAc,CAACY,WAAW,CAAC,CAC/B,CACJ,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,EAAIR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC,CAAC,CAC3C,CAAC,CAAC,CACDD,KAAK,CAACC,KAAK,EAAIR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC,CAAC,CAC3C,CACJ,CAAC,CAAE,CAACpB,OAAO,CAAEE,aAAa,CAAC,CAAC,CAE5B,mBACIP,IAAA,CAACL,WAAW,EAAC+B,KAAK,CAAElB,WAAY,CAACmB,OAAO,CAAC,QAAQ,CAACjB,KAAK,CAAEA,KAAM,CAACP,MAAM,CAAEA,MAAO,CAAE,CAAC,CAE1F,CAEA,cAAe,CAAAF,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}